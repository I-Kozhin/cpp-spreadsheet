#pragma once

#include "cell.h"
#include "common.h"

#include <functional>
#include <vector>

using Table = std::vector<std::vector<std::unique_ptr<Cell>>>;

/**
 * @brief Класс, представляющий лист таблицы.
 * 
 * Класс "Sheet" наследуется от интерфейса "SheetInterface" и представляет собой лист таблицы.
 * В классе определены методы для работы с ячейками таблицы, такие как установка значения,
 * получение значения, очистка и т.д.
 */
class Sheet : public SheetInterface {
    public:
        ~Sheet();

        /**
         * @brief Устанавливает значение в ячейку с заданной позицией.
         * 
         * Метод устанавливает значение в ячейку с указанной позицией. Если ячейка еще не существует, она создается.
         * При установке значения, метод также обновляет зависимости других ячеек, которые ссылаются на данную ячейку.
         * 
         * @param pos Позиция ячейки, в которую необходимо установить значение.
         * @param text Значение для установки в ячейку.
         */
        void SetCell(Position pos, std::string text) override;

        /**
         * @brief Получает указатель на интерфейс ячейки с заданной позицией.
         * 
         * Метод получает указатель на интерфейс ячейки с заданной позицией. Если ячейка с такой позицией не существует,
         * метод возвращает nullptr.
         * 
         * @param pos Позиция ячейки, для которой необходимо получить указатель.
         * @return Указатель на интерфейс ячейки или nullptr, если ячейка не существует.
         */
        CellInterface* GetCell(Position pos) override;

        /**
         * @brief Получает указатель на константный интерфейс ячейки с заданной позицией.
         * 
         * Метод получает указатель на константный интерфейс ячейки с заданной позицией. Если ячейка с такой позицией
         * не существует или не содержит текстового значения, метод возвращает nullptr.
         * 
         * @param pos Позиция ячейки, для которой необходимо получить указатель.
         * @return Константный указатель на интерфейс ячейки или nullptr, если ячейка не существует или пустая.
         */
        const CellInterface* GetCell(Position pos) const override;

        /**
         * @brief Получает указатель на объект типа Cell с заданной позицией.
         * 
         * Метод получает указатель на объект типа Cell с заданной позицией. Если ячейка с такой позицией не существует,
         * метод возвращает nullptr.
         * 
         * @param pos Позиция ячейки, для которой необходимо получить указатель.
         * @return Указатель на объект типа Cell или nullptr, если ячейка не существует.
         */
        Cell* GetConcreteCell(Position pos);

        /**
         * @brief Получает константный указатель на объект типа Cell с заданной позицией.
         * 
         * Метод получает константный указатель на объект типа Cell с заданной позицией. Если ячейка с такой позицией
         * не существует, метод возвращает nullptr.
         * 
         * @param pos Позиция ячейки, для которой необходимо получить указатель.
         * @return Константный указатель на объект типа Cell или nullptr, если ячейка не существует.
         */
        const Cell* GetConcreteCell(Position pos) const;

        /**
         * @brief Очищает содержимое ячейки с заданной позицией.
         * 
         * Метод очищает содержимое ячейки с заданной позицией, если такая ячейка существует.
         * После очистки, если ячейка больше не используется другими ячейками, она удаляется.
         * 
         * @param pos Позиция ячейки, которую необходимо очистить.
         */
        void ClearCell(Position pos) override;

        /**
         * @brief Возвращает размер печатаемой области таблицы.
         * 
         * Метод возвращает размер печатаемой области таблицы, то есть количество строк и столбцов,
         * в которых содержатся не пустые значения. Это используется для форматирования вывода таблицы.
         * 
         * @return Размер печатаемой области таблицы в виде объекта Size.
         */
        Size GetPrintableSize() const override;

        /**
         * @brief Выводит значения ячеек таблицы в поток вывода.
         * 
         * Метод выводит значения ячеек таблицы в поток вывода. Каждая строка таблицы выводится в отдельной строке потока,
         * значения ячеек разделены табуляцией.
         * 
         * @param output Поток вывода, в который будут выведены значения ячеек.
         */
        void PrintValues(std::ostream& output) const override;

        /**
         * @brief Выводит текстовые значения ячеек таблицы в поток вывода.
         * 
         * Метод выводит текстовые значения ячеек таблицы в поток вывода. Каждая строка таблицы выводится в отдельной строке потока,
         * значения ячеек разделены табуляцией.
         * 
         * @param output Поток вывода, в который будут выведены текстовые значения ячеек.
         */
        void PrintTexts(std::ostream& output) const override;

    private:
        Table cells_;
};
